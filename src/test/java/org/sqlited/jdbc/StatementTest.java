/*
 * Copyright (c) 2021 little-pan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sqlited.jdbc;

import org.junit.Test;
import static junit.framework.TestCase.*;

import java.sql.*;

public class StatementTest extends BaseTest {

    @Test
    public void testAutoGeneratedKeys() throws Exception {
        String url = getTcpUrl();
        prepare(url);

        try (Connection c = getConn(url);
             Statement s = c.createStatement()) {
            String sql = "insert into account(name, balance)values('Gosling', 250000)";
            boolean result;
            ResultSet rs;
            ResultSetMetaData md;
            long id;

            try {
                s.getGeneratedKeys();
                fail();
            } catch (SQLException e) {
                if (!"S1009".equals(e.getSQLState())) throw e;
            }

            result = s.execute(sql);
            assertFalse(result);
            assertNull(s.getResultSet());
            try {
                assertNull(s.getGeneratedKeys());
                fail();
            } catch (SQLException e) {
                if (!"S1009".equals(e.getSQLState())) throw e;
            }

            result = s.execute(sql, Statement.RETURN_GENERATED_KEYS);
            assertFalse(result);
            assertNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertTrue(rs.next());
            assertFalse(rs.next());

            result = s.execute(sql, (int[])null);
            assertFalse(result);
            assertNull(s.getResultSet());
            try {
                s.getGeneratedKeys();
                fail();
            } catch (SQLException e) {
                if (!"S1009".equals(e.getSQLState())) throw e;
            }

            result = s.execute(sql, new int[]{1});
            assertFalse(result);
            assertNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertTrue(rs.next());
            md = rs.getMetaData();
            assertNotNull(md);
            id = rs.getLong(1);
            assertNotSame(0, id);
            assertFalse(rs.next());

            result = s.execute(sql, new int[]{1, 2});
            assertFalse(result);
            assertNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertTrue(rs.next());
            md = rs.getMetaData();
            assertNotNull(md);
            id = rs.getLong(1);
            assertNotSame(0, id);
            assertFalse(rs.next());

            result = s.execute(sql, new String[]{"id"});
            assertFalse(result);
            assertNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertTrue(rs.next());
            md = rs.getMetaData();
            assertNotNull(md);
            id = rs.getLong(1);
            assertFalse(rs.next());
            // re-get generatedKeys
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertTrue(rs.isClosed());

            sql = "update account set balance = balance + 100 where id = " +id;
            result = s.execute(sql, Statement.RETURN_GENERATED_KEYS);
            assertFalse(result);
            assertNull(s.getResultSet());
            assertEquals(1, s.getUpdateCount());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            md = rs.getMetaData();
            assertEquals(1, md.getColumnCount());
            assertFalse(rs.next());

            sql = "delete from account where id = " +id;
            result = s.execute(sql, Statement.RETURN_GENERATED_KEYS);
            assertFalse(result);
            assertNull(s.getResultSet());
            assertEquals(1, s.getUpdateCount());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            md = rs.getMetaData();
            assertEquals(1, md.getColumnCount());
            assertFalse(rs.next());

            sql = "select *from account limit 2";
            result = s.execute(sql, Statement.RETURN_GENERATED_KEYS);
            assertTrue(result);
            assertNotNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            md = rs.getMetaData();
            assertEquals(1, md.getColumnCount());
            assertFalse(rs.next());

            s.execute("create table if not exists kv(K varchar(50) not null, v varchar(250))");
            sql = "insert into kv(k, v)values('a', '1')";
            result = s.execute(sql, Statement.RETURN_GENERATED_KEYS);
            assertFalse(result);
            assertNull(s.getResultSet());
            rs = s.getGeneratedKeys();
            assertNotNull(rs);
            assertFalse(rs.next());
        }
    }

}
